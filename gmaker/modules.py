import json
import numpy as np

class Model():
    def __init__(self, setting, printer='default', extrusion_symbol='E', oneStrokeMode=False):
        self.setting = setting
        self.code = []
        self.printer = printer
        self.options = [extrusion_symbol, setting['retractionLiftZ'], setting['startExtraLength'], setting['startCompression'], setting['startCompressionTime'], oneStrokeMode]

    def _header(self, printer='default'):
        code = []
        code.append('; generated by g-maker(2022)\n\n')
        code.append('M104 S{} T1\n'.format(self.setting['extruderTemp']))
        code.append('M140 S{}\n'.format(self.setting['bedTemp']))
        code.append('M109 S{} T1\n'.format(self.setting['extruderTemp']))
        code.append('M190 S{}\n'.format(self.setting['bedTemp']))
        code.append('M106 P1 S{}\n'.format(self.setting['fanSpeed']))
        if printer=='default':
            code.append('\n; Here is header section that depends on your printer.\n\n')
        else:
            f = open(printer, 'r')
            elem = json.load(f)
            head = elem['header']
            code.append(head)
        return code
    def _footer(self, printer='default'):
        code = []
        if printer=='default':
            code.append('\n\n; Here is footer section that depends on your printer.\n')
        else:
            f = open(printer, 'r')
            elem = json.load(f)
            head = elem['footer']
            code.append(head)
        code.append('; [EOF]')
        return code
    def stack(self, layer, z):
        self.code.append('G00 Z{:.2f}\n'.format(z))
        self.code.extend(layer.gcodeGen(z, *self.options))
    def generate(self, fname='untitled.gcode'):
        f = open(fname, 'w')
        f.writelines(self._header(self.printer))
        f.writelines(self.code)
        f.writelines(self._footer(self.printer))
        f.close
        pass

class gPath():
    def __init__(self, path):
        self.path = path
        pass
    def coords(self):
        x, y = [], []
        for i in range(len(self.path)):
            x.append(self.path[i].start.real)
            y.append(self.path[i].start.imag)
        x.append(self.path[-1].end.real)
        y.append(self.path[-1].end.imag)
        return (x, y)
    def lengths(self):    
        l = []
        for line in self.path:
            l.append(line.length())
        return l

class Layer():
    def __init__(self, gpaths, extrusion_map, feedrate_map):
        self.paths = gpaths
        self.map = extrusion_map
        self.feed = feedrate_map
    
    def cuttingConfig(self, command, mergin):
        self.cutmergin = mergin
        self.cutCommand = command

    def gcodeGen(self, z, extrusion_symbol='E', retractionLiftZ=0.0, startExtraLength=0.0, startCompression=0.0, startCompressionTime=0.0, onesStrokeMode=False):
        code = []
        flag = 0
        if onesStrokeMode:
            total_length = 0
            for i in range(len(self.paths)):
                total_length += sum(self.paths[i].lengths())

            x0 = self.paths[0].coords()[0][0]
            y0 = self.paths[0].coords()[1][0]
            code.append('G92 ' + extrusion_symbol +'0.00\n')
            code.append('G01 Z{:.2f}\n'.format(z + retractionLiftZ))
            code.append('G01 X{:.2f} Y{:.2f} '.format(x0, y0) + extrusion_symbol + '{:.2f} F2000\n'.format(startExtraLength))
            code.append('G01 Z{:.2f}\n'.format(z - startCompression))
            code.append('G4 S{}\n'.format(startCompressionTime))
            code.append('G92 ' + extrusion_symbol +'0.00\n')
            code.append('G01 Z{}\n'.format(z))
            residual_path = total_length
            extrusion = 0.0          
            for i in range(len(self.paths)):
                x = self.paths[i].coords()[0]
                y = self.paths[i].coords()[1]
                l = self.paths[i].lengths()
                if not i==0:
                    x_pre = self.paths[i-1].coords()[0][-1]
                    y_pre = self.paths[i-1].coords()[1][-1]
                    x_now = self.paths[i].coords()[0][0]
                    y_now = self.paths[i].coords()[1][0]
                    l0 = np.sqrt((x_now-x_pre)**2+(y_now-y_pre)**2)
                    if flag==0:
                        extrusion += (l0*self.map(x_pre, y_pre))
                        code.append('G01 X{:.2f} Y{:.2f} '.format(x[0], y[0]) + extrusion_symbol + '{:.2f} '.format(extrusion) + 'F{:.2f}\n'.format(self.feed(x[0], y[0])))
                    else:
                        code.append('G01 X{:.2f} Y{:.2f} '.format(x[0], y[0]) + 'F{:.2f}\n'.format(self.feed(x[0], y[0])))
                for j in range(len(x)-1):
                    if flag==0:
                        extrusion += l[j]*self.map(x[j+1], y[j+1])
                        code.append('G01 X{:.2f} Y{:.2f} '.format(x[j+1], y[j+1]) + extrusion_symbol + '{:.2f} '.format(extrusion) + 'F{:.2f}\n'.format(self.feed(x[0], y[0])))
                    else:
                        code.append('G01 X{:.2f} Y{:.2f} '.format(x[j+1], y[j+1]) + 'F{:.2f}\n'.format(self.feed(x[0], y[0])))
                    residual_path -= l[j]
                    
                    if residual_path <= self.cutmergin and flag == 0:
                        code.append(self.cutCommand)
                        flag = 1
            code.append('G92 ' + extrusion_symbol +'0.00\n')
            code.append('G01 Z{}\n'.format(z + retractionLiftZ))

        else:
            for i in range(len(self.paths)):
                x = self.paths[i].coords()[0]
                y = self.paths[i].coords()[1]
                l = self.paths[i].lengths()
                path_length = sum(l)
                if not i==0:
                    code.append('G01 Z{}\n'.format(z + retractionLiftZ))
                code.append('Z{:.2f}\n'.format(z - startCompression))
                code.append('G4 S{}\n'.format(startCompressionTime))
                code.append('G92 ' + extrusion_symbol +'0.00\n')
                code.append('G00 X{:.2f} Y{:.2f} '.format(x[0], y[0]) + extrusion_symbol + '{:.2f}\n'.format(startExtraLength))
                code.append('G92 ' + extrusion_symbol +'0.00\n')
                residual_path = path_length
                extrusion = 0.0
                for j in range(len(x)-1):
                    if flag==0:
                        extrusion += l[j]*self.map(x[j+1], y[j+1])
                        code.append('G01 X{:.2f} Y{:.2f} '.format(x[j+1], y[j+1]) + extrusion_symbol + '{:.2f} '.format(extrusion) + 'F{:.2f}\n'.format(self.feed(x[0], y[0])))
                    else:
                        code.append('G01 X{:.2f} Y{:.2f} '.format(x[j+1], y[j+1]) + 'F{:.2f}\n'.format(self.feed(x[0], y[0])))
                    residual_path -= l[j]

                    if residual_path <= self.cutmergin and flag == 0:
                        code.append(self.cutCommand)
                        flag = 1
                code.append('G92 ' + extrusion_symbol +'0.00\n')
                code.append('G01 Z{}\n'.format(z + retractionLiftZ))
        return code